import{l as c,w as l,q as y,T as I}from"./app-0842237d.js";import{c as L,p as n}from"./index-791a8db4.js";import{u as w}from"./useTasksStore-2673510b.js";const g=L(i=>({notifications:[],setNotifications:e=>i(n(o=>{o.notifications=[...e]})),addNotification:e=>i(n(o=>{const s=o.notifications.length>=6?o.notifications.slice(0,o.notifications.length-1):o.notifications;o.notifications=[e,...s]})),markAsRead:async e=>{try{return await c.put(route("notifications.read",e.id)),i(n(o=>{const s=o.notifications.findIndex(r=>r.id===e.id);o.notifications[s].read_at=l().toISOString()}))}catch(o){console.warn("Failed to set notification as read",o)}},markAllAsRead:async()=>{try{return await c.put(route("notifications.read.all")),i(n(e=>{e.notifications.forEach(o=>{o.read_at=l().toISOString()})}))}catch(e){console.warn("Failed to set notifications as read",e)}}}));function W(){const{auth:{user:i}}=y().props,{addNotification:e}=g(),{addTaskLocally:o,updateTaskLocally:s,removeTaskLocally:r,restoreTaskLocally:k,addCommentLocally:d,addAttachmentsLocally:m,removeAttachmentLocally:T,addTimeLogLocally:p,removeTimeLogLocally:u,reorderTaskLocally:f,moveTaskLocally:h}=w();return{initUserWebSocket:()=>{window.Echo.private(`App.Models.User.${i.id}`).notification(a=>{e(a),I({title:a.title,message:a.subtitle,autoClose:8e3})})},initProjectWebSocket:a=>(window.Echo.private(`App.Models.Project.${a.id}`).listen("Task\\TaskCreated",t=>o(t.task)).listen("Task\\TaskUpdated",t=>s(t.taskId,t.property,t.value)).listen("Task\\TaskDeleted",t=>r(t.taskId)).listen("Task\\TaskRestored",t=>k(t.groupId,t.task)).listen("Task\\CommentCreated",t=>d(t.comment)).listen("Task\\AttachmentsUploaded",t=>m(t.attachments)).listen("Task\\AttachmentDeleted",t=>T(t.taskId,t.attachmentId)).listen("Task\\TimeLogCreated",t=>p(t.timeLog)).listen("Task\\TimeLogDeleted",t=>u(t.taskId,t.timeLogId)).listen("Task\\TaskOrderChanged",t=>f(t.groupId,t.fromIndex,t.toIndex)).listen("Task\\TaskGroupChanged",t=>h(t.fromGroupId,t.toGroupId,t.fromIndex,t.toIndex)),()=>window.Echo.leave(`App.Models.Project.${a.id}`)),initTaskWebSocket:a=>(window.Echo.private(`App.Models.Task.${a.id}`).listen("Task\\CommentCreated",t=>d(t.comment)),()=>window.Echo.leave(`App.Models.Task.${a.id}`))}}export{W as a,g as u};
